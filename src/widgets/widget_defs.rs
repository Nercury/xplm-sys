// Copyright (c) 2015 xplm-sys developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.

/* automatically generated by rust-bindgen */

use defs::XPLMKeyFlags;

pub type XPWidgetID = *mut ::libc::c_void;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const xpProperty_Refcon: ::libc::c_uint = 0;
pub const xpProperty_Dragging: ::libc::c_uint = 1;
pub const xpProperty_DragXOff: ::libc::c_uint = 2;
pub const xpProperty_DragYOff: ::libc::c_uint = 3;
pub const xpProperty_Hilited: ::libc::c_uint = 4;
pub const xpProperty_Object: ::libc::c_uint = 5;
pub const xpProperty_Clip: ::libc::c_uint = 6;
pub const xpProperty_Enabled: ::libc::c_uint = 7;
pub const xpProperty_UserStart: ::libc::c_uint = 10000;
pub type XPWidgetPropertyID = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub button: ::libc::c_int,
    pub delta: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPMouseState_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub key: ::libc::c_char,
    pub flags: XPLMKeyFlags,
    pub vkey: ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPKeyState_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub dx: ::libc::c_int,
    pub dy: ::libc::c_int,
    pub dwidth: ::libc::c_int,
    pub dheight: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPWidgetGeometryChange_t = Struct_Unnamed4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const xpMode_Direct: ::libc::c_uint = 0;
pub const xpMode_UpChain: ::libc::c_uint = 1;
pub const xpMode_Recursive: ::libc::c_uint = 2;
pub const xpMode_DirectAllCallbacks: ::libc::c_uint = 3;
pub const xpMode_Once: ::libc::c_uint = 4;
pub type XPDispatchMode = ::libc::c_int;
pub type XPWidgetClass = ::libc::c_int;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const xpMsg_None: ::libc::c_uint = 0;
pub const xpMsg_Create: ::libc::c_uint = 1;
pub const xpMsg_Destroy: ::libc::c_uint = 2;
pub const xpMsg_Paint: ::libc::c_uint = 3;
pub const xpMsg_Draw: ::libc::c_uint = 4;
pub const xpMsg_KeyPress: ::libc::c_uint = 5;
pub const xpMsg_KeyTakeFocus: ::libc::c_uint = 6;
pub const xpMsg_KeyLoseFocus: ::libc::c_uint = 7;
pub const xpMsg_MouseDown: ::libc::c_uint = 8;
pub const xpMsg_MouseDrag: ::libc::c_uint = 9;
pub const xpMsg_MouseUp: ::libc::c_uint = 10;
pub const xpMsg_Reshape: ::libc::c_uint = 11;
pub const xpMsg_ExposedChanged: ::libc::c_uint = 12;
pub const xpMsg_AcceptChild: ::libc::c_uint = 13;
pub const xpMsg_LoseChild: ::libc::c_uint = 14;
pub const xpMsg_AcceptParent: ::libc::c_uint = 15;
pub const xpMsg_Shown: ::libc::c_uint = 16;
pub const xpMsg_Hidden: ::libc::c_uint = 17;
pub const xpMsg_DescriptorChanged: ::libc::c_uint = 18;
pub const xpMsg_PropertyChanged: ::libc::c_uint = 19;
pub const xpMsg_MouseWheel: ::libc::c_uint = 20;
pub const xpMsg_CursorAdjust: ::libc::c_uint = 21;
pub const xpMsg_UserStart: ::libc::c_uint = 10000;
pub type XPWidgetMessage = ::libc::c_int;
pub type XPWidgetFunc_t =
    ::std::option::Option<extern "C" fn(inMessage: XPWidgetMessage,
                                        inWidget: XPWidgetID,
                                        inParam1: ::libc::intptr_t,
                                        inParam2: ::libc::intptr_t) -> ::libc::c_int>;
