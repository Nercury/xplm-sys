/* automatically generated by rust-bindgen */

use super::widget_defs::{XPWidgetID, XPWidgetClass, XPWidgetMessage};

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed1 {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub visible: ::std::os::raw::c_int,
    pub descriptor: *const ::std::os::raw::c_char,
    pub isRoot: ::std::os::raw::c_int,
    pub containerIndex: ::std::os::raw::c_int,
    pub widgetClass: XPWidgetClass,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPWidgetCreate_t = Struct_Unnamed1;
extern "C" {
    pub fn XPUCreateWidgets(inWidgetDefs: *const XPWidgetCreate_t,
                            inCount: ::std::os::raw::c_int,
                            inParamParent: XPWidgetID,
                            ioWidgets: *mut XPWidgetID);
    pub fn XPUMoveWidgetBy(inWidget: XPWidgetID,
                           inDeltaX: ::std::os::raw::c_int,
                           inDeltaY: ::std::os::raw::c_int);
    pub fn XPUFixedLayout(inMessage: XPWidgetMessage, inWidget: XPWidgetID,
                          inParam1: isize, inParam2: isize)
     -> ::std::os::raw::c_int;
    pub fn XPUSelectIfNeeded(inMessage: XPWidgetMessage, inWidget: XPWidgetID,
                             inParam1: isize, inParam2: isize,
                             inEatClick: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn XPUDefocusKeyboard(inMessage: XPWidgetMessage,
                              inWidget: XPWidgetID, inParam1: isize,
                              inParam2: isize,
                              inEatClick: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn XPUDragWidget(inMessage: XPWidgetMessage, inWidget: XPWidgetID,
                         inParam1: isize, inParam2: isize,
                         inLeft: ::std::os::raw::c_int,
                         inTop: ::std::os::raw::c_int,
                         inRight: ::std::os::raw::c_int,
                         inBottom: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
