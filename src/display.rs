/* automatically generated by rust-bindgen */

use defs::{XPLMPluginID, XPLMKeyFlags};

#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    xplm_Phase_FirstScene = 0,
    xplm_Phase_Terrain = 5,
    xplm_Phase_Airports = 10,
    xplm_Phase_Vectors = 15,
    xplm_Phase_Objects = 20,
    xplm_Phase_Airplanes = 25,
    xplm_Phase_LastScene = 30,
    xplm_Phase_FirstCockpit = 35,
    xplm_Phase_Panel = 40,
    xplm_Phase_Gauges = 45,
    xplm_Phase_Window = 50,
    xplm_Phase_LastCockpit = 55,
    xplm_Phase_LocalMap3D = 100,
    xplm_Phase_LocalMap2D = 101,
    xplm_Phase_LocalMapProfile = 102,
}
pub type XPLMDrawingPhase = ::std::os::raw::c_int;
pub type XPLMDrawCallback_f =
    ::std::option::Option<unsafe extern "C" fn(inPhase: XPLMDrawingPhase,
                                               inIsBefore:
                                                   ::std::os::raw::c_int,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type XPLMKeySniffer_f =
    ::std::option::Option<unsafe extern "C" fn(inChar: ::std::os::raw::c_char,
                                               inFlags: XPLMKeyFlags,
                                               inVirtualKey:
                                                   ::std::os::raw::c_char,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[derive(Copy, Clone, Debug)]
#[repr(u32)]
pub enum XPLMMouseStatus {
    xplm_MouseDown = 1,
    xplm_MouseDrag = 2,
    xplm_MouseUp = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum XPLMCursorStatus {
    xplm_CursorDefault = 0,
    xplm_CursorHidden = 1,
    xplm_CursorArrow = 2,
    xplm_CursorCustom = 3,
}
pub type XPLMWindowID = *mut ::std::os::raw::c_void;
pub type XPLMDrawWindow_f =
    ::std::option::Option<unsafe extern "C" fn(inWindowID: XPLMWindowID,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)>;
pub type XPLMHandleKey_f =
    ::std::option::Option<unsafe extern "C" fn(inWindowID: XPLMWindowID,
                                               inKey: ::std::os::raw::c_char,
                                               inFlags: XPLMKeyFlags,
                                               inVirtualKey:
                                                   ::std::os::raw::c_char,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void,
                                               losingFocus:
                                                   ::std::os::raw::c_int)>;
pub type XPLMHandleMouseClick_f =
    ::std::option::Option<unsafe extern "C" fn(inWindowID: XPLMWindowID,
                                               x: ::std::os::raw::c_int,
                                               y: ::std::os::raw::c_int,
                                               inMouse: XPLMMouseStatus,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type XPLMHandleCursor_f =
    ::std::option::Option<unsafe extern "C" fn(inWindowID: XPLMWindowID,
                                               x: ::std::os::raw::c_int,
                                               y: ::std::os::raw::c_int,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> XPLMCursorStatus>;
pub type XPLMHandleMouseWheel_f =
    ::std::option::Option<unsafe extern "C" fn(inWindowID: XPLMWindowID,
                                               x: ::std::os::raw::c_int,
                                               y: ::std::os::raw::c_int,
                                               wheel: ::std::os::raw::c_int,
                                               clicks: ::std::os::raw::c_int,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed4 {
    pub structSize: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub visible: ::std::os::raw::c_int,
    pub drawWindowFunc: XPLMDrawWindow_f,
    pub handleMouseClickFunc: XPLMHandleMouseClick_f,
    pub handleKeyFunc: XPLMHandleKey_f,
    pub handleCursorFunc: XPLMHandleCursor_f,
    pub handleMouseWheelFunc: XPLMHandleMouseWheel_f,
    pub refcon: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPLMCreateWindow_t = Struct_Unnamed4;
pub type XPLMHotKey_f =
    ::std::option::Option<unsafe extern "C" fn(inRefcon:
                                                   *mut ::std::os::raw::c_void)>;
pub type XPLMHotKeyID = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn XPLMRegisterDrawCallback(inCallback: XPLMDrawCallback_f,
                                    inPhase: XPLMDrawingPhase,
                                    inWantsBefore: ::std::os::raw::c_int,
                                    inRefcon: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn XPLMUnregisterDrawCallback(inCallback: XPLMDrawCallback_f,
                                      inPhase: XPLMDrawingPhase,
                                      inWantsBefore: ::std::os::raw::c_int,
                                      inRefcon: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn XPLMRegisterKeySniffer(inCallback: XPLMKeySniffer_f,
                                  inBeforeWindows: ::std::os::raw::c_int,
                                  inRefcon: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn XPLMUnregisterKeySniffer(inCallback: XPLMKeySniffer_f,
                                    inBeforeWindows: ::std::os::raw::c_int,
                                    inRefcon: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn XPLMGetScreenSize(outWidth: *mut ::std::os::raw::c_int,
                             outHeight: *mut ::std::os::raw::c_int);
    pub fn XPLMGetMouseLocation(outX: *mut ::std::os::raw::c_int,
                                outY: *mut ::std::os::raw::c_int);
    pub fn XPLMCreateWindow(inLeft: ::std::os::raw::c_int,
                            inTop: ::std::os::raw::c_int,
                            inRight: ::std::os::raw::c_int,
                            inBottom: ::std::os::raw::c_int,
                            inIsVisible: ::std::os::raw::c_int,
                            inDrawCallback: XPLMDrawWindow_f,
                            inKeyCallback: XPLMHandleKey_f,
                            inMouseCallback: XPLMHandleMouseClick_f,
                            inRefcon: *mut ::std::os::raw::c_void)
     -> XPLMWindowID;
    pub fn XPLMCreateWindowEx(inParams: *mut XPLMCreateWindow_t)
     -> XPLMWindowID;
    pub fn XPLMDestroyWindow(inWindowID: XPLMWindowID);
    pub fn XPLMGetWindowGeometry(inWindowID: XPLMWindowID,
                                 outLeft: *mut ::std::os::raw::c_int,
                                 outTop: *mut ::std::os::raw::c_int,
                                 outRight: *mut ::std::os::raw::c_int,
                                 outBottom: *mut ::std::os::raw::c_int);
    pub fn XPLMSetWindowGeometry(inWindowID: XPLMWindowID,
                                 inLeft: ::std::os::raw::c_int,
                                 inTop: ::std::os::raw::c_int,
                                 inRight: ::std::os::raw::c_int,
                                 inBottom: ::std::os::raw::c_int);
    pub fn XPLMGetWindowIsVisible(inWindowID: XPLMWindowID)
     -> ::std::os::raw::c_int;
    pub fn XPLMSetWindowIsVisible(inWindowID: XPLMWindowID,
                                  inIsVisible: ::std::os::raw::c_int);
    pub fn XPLMGetWindowRefCon(inWindowID: XPLMWindowID)
     -> *mut ::std::os::raw::c_void;
    pub fn XPLMSetWindowRefCon(inWindowID: XPLMWindowID,
                               inRefcon: *mut ::std::os::raw::c_void);
    pub fn XPLMTakeKeyboardFocus(inWindow: XPLMWindowID);
    pub fn XPLMBringWindowToFront(inWindow: XPLMWindowID);
    pub fn XPLMIsWindowInFront(inWindow: XPLMWindowID)
     -> ::std::os::raw::c_int;
    pub fn XPLMRegisterHotKey(inVirtualKey: ::std::os::raw::c_char,
                              inFlags: XPLMKeyFlags,
                              inDescription: *const ::std::os::raw::c_char,
                              inCallback: XPLMHotKey_f,
                              inRefcon: *mut ::std::os::raw::c_void)
     -> XPLMHotKeyID;
    pub fn XPLMUnregisterHotKey(inHotKey: XPLMHotKeyID);
    pub fn XPLMCountHotKeys() -> ::std::os::raw::c_int;
    pub fn XPLMGetNthHotKey(inIndex: ::std::os::raw::c_int) -> XPLMHotKeyID;
    pub fn XPLMGetHotKeyInfo(inHotKey: XPLMHotKeyID,
                             outVirtualKey: *mut ::std::os::raw::c_char,
                             outFlags: *mut XPLMKeyFlags,
                             outDescription: *mut ::std::os::raw::c_char,
                             outPlugin: *mut XPLMPluginID);
    pub fn XPLMSetHotKeyCombination(inHotKey: XPLMHotKeyID,
                                    inVirtualKey: ::std::os::raw::c_char,
                                    inFlags: XPLMKeyFlags);
}
