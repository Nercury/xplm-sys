// Copyright (c) 2015 xplm-sys developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.

/* automatically generated by rust-bindgen */

use defs::XPLMPluginID;

pub type XPLMFeatureEnumerator_f =
    ::std::option::Option<unsafe extern "C" fn(inFeature:
                                                   *const ::libc::c_char,
                                               inRef: *mut ::libc::c_void)
                              -> ()>;
extern "C" {
    pub fn XPLMGetMyID() -> XPLMPluginID;
    pub fn XPLMCountPlugins() -> ::libc::c_int;
    pub fn XPLMGetNthPlugin(inIndex: ::libc::c_int) -> XPLMPluginID;
    pub fn XPLMFindPluginByPath(inPath: *const ::libc::c_char)
     -> XPLMPluginID;
    pub fn XPLMFindPluginBySignature(inSignature: *const ::libc::c_char)
     -> XPLMPluginID;
    pub fn XPLMGetPluginInfo(inPlugin: XPLMPluginID,
                             outName: *mut ::libc::c_char,
                             outFilePath: *mut ::libc::c_char,
                             outSignature: *mut ::libc::c_char,
                             outDescription: *mut ::libc::c_char) -> ();
    pub fn XPLMIsPluginEnabled(inPluginID: XPLMPluginID) -> ::libc::c_int;
    pub fn XPLMEnablePlugin(inPluginID: XPLMPluginID) -> ::libc::c_int;
    pub fn XPLMDisablePlugin(inPluginID: XPLMPluginID) -> ();
    pub fn XPLMReloadPlugins() -> ();
    pub fn XPLMSendMessageToPlugin(inPlugin: XPLMPluginID,
                                   inMessage: ::libc::c_int,
                                   inParam: *mut ::libc::c_void) -> ();
    pub fn XPLMHasFeature(inFeature: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XPLMIsFeatureEnabled(inFeature: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn XPLMEnableFeature(inFeature: *const ::libc::c_char,
                             inEnable: ::libc::c_int) -> ();
    pub fn XPLMEnumerateFeatures(inEnumerator: XPLMFeatureEnumerator_f,
                                 inRef: *mut ::libc::c_void) -> ();
}
