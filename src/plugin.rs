/* automatically generated by rust-bindgen */

use defs::XPLMPluginID;

pub type XPLMFeatureEnumerator_f =
    ::std::option::Option<unsafe extern "C" fn(inFeature:
                                                   *const ::std::os::raw::c_char,
                                               inRef:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn XPLMGetMyID() -> XPLMPluginID;
    pub fn XPLMCountPlugins() -> ::std::os::raw::c_int;
    pub fn XPLMGetNthPlugin(inIndex: ::std::os::raw::c_int) -> XPLMPluginID;
    pub fn XPLMFindPluginByPath(inPath: *const ::std::os::raw::c_char)
     -> XPLMPluginID;
    pub fn XPLMFindPluginBySignature(inSignature:
                                         *const ::std::os::raw::c_char)
     -> XPLMPluginID;
    pub fn XPLMGetPluginInfo(inPlugin: XPLMPluginID,
                             outName: *mut ::std::os::raw::c_char,
                             outFilePath: *mut ::std::os::raw::c_char,
                             outSignature: *mut ::std::os::raw::c_char,
                             outDescription: *mut ::std::os::raw::c_char);
    pub fn XPLMIsPluginEnabled(inPluginID: XPLMPluginID)
     -> ::std::os::raw::c_int;
    pub fn XPLMEnablePlugin(inPluginID: XPLMPluginID)
     -> ::std::os::raw::c_int;
    pub fn XPLMDisablePlugin(inPluginID: XPLMPluginID);
    pub fn XPLMReloadPlugins();
    pub fn XPLMSendMessageToPlugin(inPlugin: XPLMPluginID,
                                   inMessage: ::std::os::raw::c_int,
                                   inParam: *mut ::std::os::raw::c_void);
    pub fn XPLMHasFeature(inFeature: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn XPLMIsFeatureEnabled(inFeature: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn XPLMEnableFeature(inFeature: *const ::std::os::raw::c_char,
                             inEnable: ::std::os::raw::c_int);
    pub fn XPLMEnumerateFeatures(inEnumerator: XPLMFeatureEnumerator_f,
                                 inRef: *mut ::std::os::raw::c_void);
}
