/* automatically generated by rust-bindgen */

#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    xplm_FlightLoop_Phase_BeforeFlightModel = 0,
    xplm_FlightLoop_Phase_AfterFlightModel = 1,
}
pub type XPLMFlightLoopPhaseType = ::std::os::raw::c_int;
pub type XPLMFlightLoopID = *mut ::std::os::raw::c_void;
pub type XPLMFlightLoop_f =
    ::std::option::Option<unsafe extern "C" fn(inElapsedSinceLastCall:
                                                   ::std::os::raw::c_float,
                                               inElapsedTimeSinceLastFlightLoop:
                                                   ::std::os::raw::c_float,
                                               inCounter:
                                                   ::std::os::raw::c_int,
                                               inRefcon:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_float>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed2 {
    pub structSize: ::std::os::raw::c_int,
    pub phase: XPLMFlightLoopPhaseType,
    pub callbackFunc: XPLMFlightLoop_f,
    pub refcon: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPLMCreateFlightLoop_t = Struct_Unnamed2;
extern "C" {
    pub fn XPLMGetElapsedTime() -> ::std::os::raw::c_float;
    pub fn XPLMGetCycleNumber() -> ::std::os::raw::c_int;
    pub fn XPLMRegisterFlightLoopCallback(inFlightLoop: XPLMFlightLoop_f,
                                          inInterval: ::std::os::raw::c_float,
                                          inRefcon:
                                              *mut ::std::os::raw::c_void);
    pub fn XPLMUnregisterFlightLoopCallback(inFlightLoop: XPLMFlightLoop_f,
                                            inRefcon:
                                                *mut ::std::os::raw::c_void);
    pub fn XPLMSetFlightLoopCallbackInterval(inFlightLoop: XPLMFlightLoop_f,
                                             inInterval:
                                                 ::std::os::raw::c_float,
                                             inRelativeToNow:
                                                 ::std::os::raw::c_int,
                                             inRefcon:
                                                 *mut ::std::os::raw::c_void);
    pub fn XPLMCreateFlightLoop(inParams: *mut XPLMCreateFlightLoop_t)
     -> XPLMFlightLoopID;
    pub fn XPLMDestroyFlightLoop(inFlightLoopID: XPLMFlightLoopID);
    pub fn XPLMScheduleFlightLoop(inFlightLoopID: XPLMFlightLoopID,
                                  inInterval: ::std::os::raw::c_float,
                                  inRelativeToNow: ::std::os::raw::c_int);
}
