/* automatically generated by rust-bindgen */

pub type Enum_Unnamed1 = ::libc::c_uint;
pub const xplm_FlightLoop_Phase_BeforeFlightModel: ::libc::c_uint = 0;
pub const xplm_FlightLoop_Phase_AfterFlightModel: ::libc::c_uint = 1;
pub type XPLMFlightLoopPhaseType = ::libc::c_int;
pub type XPLMFlightLoopID = *mut ::libc::c_void;
pub type XPLMFlightLoop_f =
    ::std::option::Option<unsafe extern "C" fn(inElapsedSinceLastCall:
                                                   ::libc::c_float,
                                               inElapsedTimeSinceLastFlightLoop:
                                                   ::libc::c_float,
                                               inCounter: ::libc::c_int,
                                               inRefcon: *mut ::libc::c_void)
                              -> ::libc::c_float>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub structSize: ::libc::c_int,
    pub phase: XPLMFlightLoopPhaseType,
    pub callbackFunc: XPLMFlightLoop_f,
    pub refcon: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPLMCreateFlightLoop_t = Struct_Unnamed2;
extern "C" {
    pub fn XPLMGetElapsedTime() -> ::libc::c_float;
    pub fn XPLMGetCycleNumber() -> ::libc::c_int;
    pub fn XPLMRegisterFlightLoopCallback(inFlightLoop: XPLMFlightLoop_f,
                                          inInterval: ::libc::c_float,
                                          inRefcon: *mut ::libc::c_void)
     -> ();
    pub fn XPLMUnregisterFlightLoopCallback(inFlightLoop: XPLMFlightLoop_f,
                                            inRefcon: *mut ::libc::c_void)
     -> ();
    pub fn XPLMSetFlightLoopCallbackInterval(inFlightLoop: XPLMFlightLoop_f,
                                             inInterval: ::libc::c_float,
                                             inRelativeToNow: ::libc::c_int,
                                             inRefcon: *mut ::libc::c_void)
     -> ();
    pub fn XPLMCreateFlightLoop(inParams: *mut XPLMCreateFlightLoop_t)
     -> XPLMFlightLoopID;
    pub fn XPLMDestroyFlightLoop(inFlightLoopID: XPLMFlightLoopID) -> ();
    pub fn XPLMScheduleFlightLoop(inFlightLoopID: XPLMFlightLoopID,
                                  inInterval: ::libc::c_float,
                                  inRelativeToNow: ::libc::c_int) -> ();
}
