/* automatically generated by rust-bindgen */

#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    xplm_Tex_GeneralInterface = 0,
    xplm_Tex_AircraftPaint = 1,
    xplm_Tex_AircraftLiteMap = 2,
}
pub type XPLMTextureID = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed2 {
    xplmFont_Basic = 0,
    xplmFont_Menus = 1,
    xplmFont_Metal = 2,
    xplmFont_Led = 3,
    xplmFont_LedWide = 4,
    xplmFont_PanelHUD = 5,
    xplmFont_PanelEFIS = 6,
    xplmFont_PanelGPS = 7,
    xplmFont_RadiosGA = 8,
    xplmFont_RadiosBC = 9,
    xplmFont_RadiosHM = 10,
    xplmFont_RadiosGANarrow = 11,
    xplmFont_RadiosBCNarrow = 12,
    xplmFont_RadiosHMNarrow = 13,
    xplmFont_Timer = 14,
    xplmFont_FullRound = 15,
    xplmFont_SmallRound = 16,
    xplmFont_Menus_Localized = 17,
    xplmFont_Proportional = 18,
}
pub type XPLMFontID = ::std::os::raw::c_int;
extern "C" {
    pub fn XPLMSetGraphicsState(inEnableFog: ::std::os::raw::c_int,
                                inNumberTexUnits: ::std::os::raw::c_int,
                                inEnableLighting: ::std::os::raw::c_int,
                                inEnableAlphaTesting: ::std::os::raw::c_int,
                                inEnableAlphaBlending: ::std::os::raw::c_int,
                                inEnableDepthTesting: ::std::os::raw::c_int,
                                inEnableDepthWriting: ::std::os::raw::c_int);
    pub fn XPLMBindTexture2d(inTextureNum: ::std::os::raw::c_int,
                             inTextureUnit: ::std::os::raw::c_int);
    pub fn XPLMGenerateTextureNumbers(outTextureIDs:
                                          *mut ::std::os::raw::c_int,
                                      inCount: ::std::os::raw::c_int);
    pub fn XPLMGetTexture(inTexture: XPLMTextureID) -> ::std::os::raw::c_int;
    pub fn XPLMWorldToLocal(inLatitude: ::std::os::raw::c_double,
                            inLongitude: ::std::os::raw::c_double,
                            inAltitude: ::std::os::raw::c_double,
                            outX: *mut ::std::os::raw::c_double,
                            outY: *mut ::std::os::raw::c_double,
                            outZ: *mut ::std::os::raw::c_double);
    pub fn XPLMLocalToWorld(inX: ::std::os::raw::c_double,
                            inY: ::std::os::raw::c_double,
                            inZ: ::std::os::raw::c_double,
                            outLatitude: *mut ::std::os::raw::c_double,
                            outLongitude: *mut ::std::os::raw::c_double,
                            outAltitude: *mut ::std::os::raw::c_double);
    pub fn XPLMDrawTranslucentDarkBox(inLeft: ::std::os::raw::c_int,
                                      inTop: ::std::os::raw::c_int,
                                      inRight: ::std::os::raw::c_int,
                                      inBottom: ::std::os::raw::c_int);
    pub fn XPLMDrawString(inColorRGB: *mut ::std::os::raw::c_float,
                          inXOffset: ::std::os::raw::c_int,
                          inYOffset: ::std::os::raw::c_int,
                          inChar: *mut ::std::os::raw::c_char,
                          inWordWrapWidth: *mut ::std::os::raw::c_int,
                          inFontID: XPLMFontID);
    pub fn XPLMDrawNumber(inColorRGB: *mut ::std::os::raw::c_float,
                          inXOffset: ::std::os::raw::c_int,
                          inYOffset: ::std::os::raw::c_int,
                          inValue: ::std::os::raw::c_double,
                          inDigits: ::std::os::raw::c_int,
                          inDecimals: ::std::os::raw::c_int,
                          inShowSign: ::std::os::raw::c_int,
                          inFontID: XPLMFontID);
    pub fn XPLMGetFontDimensions(inFontID: XPLMFontID,
                                 outCharWidth: *mut ::std::os::raw::c_int,
                                 outCharHeight: *mut ::std::os::raw::c_int,
                                 outDigitsOnly: *mut ::std::os::raw::c_int);
    pub fn XPLMMeasureString(inFontID: XPLMFontID,
                             inChar: *const ::std::os::raw::c_char,
                             inNumChars: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
}
