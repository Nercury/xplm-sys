/* automatically generated by rust-bindgen */

pub type Enum_Unnamed1 = ::libc::c_uint;
pub const xplm_ControlCameraUntilViewChanges: ::libc::c_uint = 1;
pub const xplm_ControlCameraForever: ::libc::c_uint = 2;
pub type XPLMCameraControlDuration = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
    pub z: ::libc::c_float,
    pub pitch: ::libc::c_float,
    pub heading: ::libc::c_float,
    pub roll: ::libc::c_float,
    pub zoom: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type XPLMCameraPosition_t = Struct_Unnamed2;
pub type XPLMCameraControl_f =
    ::std::option::Option<unsafe extern "C" fn(outCameraPosition:
                                                   *mut XPLMCameraPosition_t,
                                               inIsLosingControl:
                                                   ::libc::c_int,
                                               inRefcon: *mut ::libc::c_void)
                              -> ::libc::c_int>;
extern "C" {
    pub fn XPLMControlCamera(inHowLong: XPLMCameraControlDuration,
                             inControlFunc: XPLMCameraControl_f,
                             inRefcon: *mut ::libc::c_void) -> ();
    pub fn XPLMDontControlCamera() -> ();
    pub fn XPLMIsCameraBeingControlled(outCameraControlDuration:
                                           *mut XPLMCameraControlDuration)
     -> ::libc::c_int;
    pub fn XPLMReadCameraPosition(outCameraPosition:
                                      *mut XPLMCameraPosition_t) -> ();
}
